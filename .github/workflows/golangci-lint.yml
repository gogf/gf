# Copyright GoFrame Author(https://goframe.org). All Rights Reserved.
#
# This Source Code Form is subject to the terms of the MIT License.
# If a copy of the MIT was not distributed with this file,
# You can obtain one at https://github.com/gogf/gf.

name: GolangCI-Lint
on:
  push:
    branches:
      - master
      - develop
      - personal/**
      - feature/**
      - enhance/**
      - fix/**
      - feat/**
  pull_request_target:
    branches:
      - master
      - develop
      - personal/**
      - feature/**
      - enhance/**
      - fix/**
      - feat/**

jobs:
  golangci:
    strategy:
      matrix:
        go-version: [ 'stable' ]
    name: golangci-lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Setup Golang ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          # Required: specify the golangci-lint version without the patch version to always use the latest patch.
          version: v1.62.2
          only-new-issues: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
          args: --timeout 3m0s
      - name: Install gci
        run: go install github.com/daixiang0/gci@latest
      - name: Run gci
        run: |
          gci write --custom-order \
          --skip-generated \
          --skip-vendor \
          -s standard \
          -s blank \
          -s default \
          -s dot \
          -s "prefix(github.com/gogf/gf/v2)" \
          -s "prefix(github.com/gogf/gf/cmd)" \
          -s "prefix(github.com/gogf/gf/contrib)" \
          -s "prefix(github.com/gogf/gf/example)" \
          ./
      - name: Check for changes
        run: |
          # check for code changes
          if [[ -n "$(git status --porcelain)" ]]; then
            echo "HAS_CHANGES=true" >> $GITHUB_ENV
          else
            echo "HAS_CHANGES=false" >> $GITHUB_ENV
          fi
      - name: Install GitHub CLI (gh)
        run: |
          sudo apt-get update
          sudo apt-get install -y gh
      - name: Install jq
        run: |
          sudo apt-get install -y jq
      - name: Get Pull Request info
        run: |
          # BRANCH=$(git rev-parse --abbrev-ref HEAD)
          BRANCH=${{ github.event.pull_request.head.ref }}
          echo "Current branch: $BRANCH"
            
          PR_LIST=$(gh pr list --state open --head $BRANCH --json number)
          echo "PR list: $PR_LIST"
            
          PR_NUMBER=$(echo "$PR_LIST" | jq '.[0].number')
          echo "PR number: $PR_NUMBER"
            
          if [[ -n "$PR_NUMBER" ]]; then
            echo "Pull Request number: $PR_NUMBER"
            echo "HAS_PR=true" >> $GITHUB_ENV
          else
            echo "No Pull Request found for this branch."
            echo "HAS_PR=false" >> $GITHUB_ENV
          fi
          
#          PR_NUMBER=${{ github.event.pull_request.number }}
#          BRANCH=$(gh pr view $PR_NUMBER --json headRefName --jq '.headRefName')
#          echo "Pull Request source branch: $BRANCH"
#
#          PR_NUMBER=$(gh pr list --state open --head $(git rev-parse --abbrev-ref HEAD) --json number --jq '.[0].number')
#          if [[ -n "$PR_NUMBER" ]]; then
#            echo "Pull Request number: $PR_NUMBER"
#            echo "HAS_PR=true" >> $GITHUB_ENV
#          else
#            echo "No Pull Request found for this branch."
#            echo "HAS_PR=false" >> $GITHUB_ENV
#          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Configure Commit Content
        run: |
          # Set the HAS_CHANGES based on the type of event and whether there are code changes
          if [[ "${{ github.event_name }}" == "push" && env.HAS_PR != 'true' && env.HAS_CHANGES == 'true' ]]; then
            echo "NEED_COMMIT=true" >> $GITHUB_ENV
          elif [[ "${{ github.event_name }}" == "pull_request_target" && env.HAS_CHANGES == 'true' ]]; then
            echo "NEED_COMMIT=true" >> $GITHUB_ENV
          else
            echo "NEED_COMMIT=false" >> $GITHUB_ENV
          fi
      - name: Output all environment variables
        run: |
            env
      - name: Configure Git
        echo "NEED_COMMIT: $NEED_COMMIT"
        echo "env NEED_COMMIT: env.NEED_COMMIT"
        if: env.NEED_COMMIT == 'true'
        run: |
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
      - name: Commit and push changes
        if: env.NEED_COMMIT == 'true'
        run: |
          echo $(git rev-parse --abbrev-ref HEAD)
          git add .
          git commit -m "Apply gci import order changes [skip ci]"
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} HEAD:$(git rev-parse --abbrev-ref HEAD)